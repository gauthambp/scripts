#!/bin/sh


########################################################################
#+ NAME
#+     $PROG - Installs a new version of a database from backup files.
#+
#+ SYNOPSIS
#+     $PROG  -man
#+     $PROG  -usage | -?
#+     $PROG  -comments
#+     $PROG  pf=pf-file
#+     $PROG  pf=pf-file area=pf-area
#+     $PROG  test=yes pf=pf-file
#+     $PROG  test=yes pf=pf-file area=pf-area
#+
#+ DESCRIPTION
#+
#+     The script is passed the name of the application ws pf file,
#+     which contains the database name and database backup file name.
#+     The script is used to restore a new version of production database
#+     over a read only version, so that read only version is kept up to
#+     date. Or to refresh the development environment database with new
#+     production data for testing.
#+
#+     The following steps are performed:
#+        . delete the existing database
#+        . restore from the backup file
#+        . convert the database version if necessary
#+        . truncate the database bi file
#+        . start the ai file if necessary
#+        . change file protections to rw-rw-rw
#+
#+ OPTIONS
#+     -man                          - Display man page for this script
#+     -usage | -?                   - Display usage information
#+     -comments                     - Show script comments
#+     test=yes                      - Will display the command that would
#+                                     have run back to terminal display
#+     pf=pf-file                    - Name of the progress pf file that
#+                                     contains information about an apps
#+                                     ws broker/agents
#+     area=pf-area                  - Used when where is multi pf file
#+                                     locations (dev, staging, live).
#+
#+ EXAMPLES
#+
#+     $PROG pf=workshop
#+     $PROG pf=workshop area=dev
#+     $PROG pf=workshop test=yes
#+
#+ FILES
#+
#+ SEE ALSO
#+
#+     pfeval
#+     admin-env
#+     tst_prm
#+
#+ BUGS
#+
#- AUTHOR & DT : Steve McKay <mckay@progress.com>, MIS 14-Jul-97
#- RCS VERS $Id$
#- MOD DATE, BY: Steve McKay Aug-97
#- MOD DESCRIPT: . Include Std Funcation for script Documentation
#-               . Changes to increase error handling
#-               . Include the std admin envir variable script
#+               . Changed the parameter passing method
#- MOD DATE, BY: Steve McKay Mar-98
#- MOD DESCRIPT: . Changes to handle restoring databases > 2gbytes from
#-                  mutliple disk files on the back array
#- MOD DATE, BY: Steve McKay Apr-98
#- MOD DESCRIPT: .
#
#- MOD DATE, BY: Chinnasamy Arumugam Apr-2009
#- MOD DESCRIPT: . fixed the bug for the missing $ENV reference on
#                . the refresh command. Check line 216 & 220.
#
########################################################################

PROG=`basename $0`
ADIR=`dirname $0`
[ "$ADIR" = "." ] && ADIR=`pwd`
BASEDIR=${BASEDIR-/usr/local/}
BINDIR=$BASEDIR/admin/bin
PATH=/etc:$BINDIR:$ADIR:$PATH
TODAY=${TODAY-`date +'%Y%m%d'`}
export PATH TODAY

. $BINDIR/stdfuncs
. $BINDIR/tst_prm

AREA=${area-""}
TEST=${test-""}
PFFILE=${pf-""}
ENV=${env-""}

export ENV

. $BINDIR/admin-env

umask 0

# default delay on proutil -C truncate bi for -G is 60 seconds
# OE 10.x and above doesnot require delay for BI truncate operation
# -- Chinnasamy Arumugam 03/30/2011
#G=${G-60}
G=${G-0}
BACKVOLSIZE=${BACKVOLSIZE-2000000}

# if -test option specified, then just echo commands
if [ "$TEST" = "yes" ]
  then
     TEST=echo
     shift
fi

# evaluate .pf file.  This must also set $DLC* variables.
eval `$BINDIR/pfeval pf=$PFFILE pftype=db`
if [ $? -ne 0 ]
  then
     echo "$PROG: ERROR: $PFFILE is not a valid database configuration name"
     exit 1
fi

# database name less path
LDB=`basename $DB`
VOLMFILE=/tmp/$LDB.vols

# Create a file with a list of database backups in inverse date order
# (latest first).  Next, read the newest backup file name into a variable.
BACKUPDIR=`dirname $PROBKUPDIR`
ls -1t $BACKUPDIR/$LDB.*.bu*  > backup.txt

read BACKUPDB < backup.txt

LATEST=`echo "$BACKUPDB" | awk -F. '{print $2}'`

rm -f backup.txt

#
# make sure database is shut down
#
if [ -f $DB.lk ]
then
   echo "$PROG: WARNING: $DB.lk found--skipping"
   exit 1
fi

#
# Check for the Blocksize of the Database before deleting
#
# The words "Primary data block size" are used only once in the statistics
# generated by the prostrct statistics command. If this should
# ever change or the location of the blocksize # should be
# re-positioned, then the command line will need to be altered
# accordingly.
#
echo $BLOCKSIZE
STATS=`$DLCBIN/prostrct statistics $DB | grep "Primary data block size" `
if [ $? -eq 0 ]
then
   BLOCKSIZE=`echo "$STATS" | awk -F" " '{print $5}'`
fi
echo $BLOCKSIZE

# If BLOCKSIZE doesn't exist (for example because the database doesn't
# exist yet), then set to standard.
if [ "$BLOCKSIZE" = "" ]
then
   BLOCKSIZE=1024
fi

#
# Delete Database Files from directory
#
# cd into db directory so any core files will be dropped there
cd `dirname $DB`
if [ -f $DB.db ]
  then
     echo "%% `date +'%a %T'` Removing existing database files for $DB ..."
     echo y | $TEST $DLCBIN/prodel $DB
     if [ $? -ne 0 ]
     then
        exit $?
     fi
fi

#
# Restore database from Backup File
#
if [ -f $DB.st ]
then
    echo "%% `date +'%a %T'` Building new Database structure for $DB ..."
    $TEST $DLCBIN/prostrct create $DB $DB.st -blocksize $BLOCKSIZE
    if [ $? -ne 0 ]
    then
          exit $?
    fi
fi

echo "\n%% `date +'%a %T'` Restoring database $DB from $BACKUPDIR/$LDB.$LATEST.bu ..."
if [ "$PROBKUPVOL" = "" ]
  then
     $TEST $DLCBIN/prorest $DB $BACKUPDB
     if [ $? -ne 0 ]
       then
          exit $?
     fi
  else
     if [ -f $VOLMFILE ]
       then
          rm $VOLMFILE
     fi

     for i in 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
     do
       if [ $PROBKUPVOL -ge $i ]
         then
            echo $BACKUPDIR/$LDB.$LATEST.bu.$i >> $VOLMFILE
       fi
     done

     $TEST $DLCBIN/prorest $DB $BACKUPDIR/$LDB.$LATEST.bu.1 < $VOLMFILE
     if [ $? -ne 0 ]
       then
          exit $?
     fi
fi

#
# Convert to correct Progress Version if necessary
#
if [ "$DBCONV" != "" ]
  then
     echo "%% `date +'%a %T'` Converting database $DB to $DBCONV ..."
     echo y | $TEST $DLCBIN/proutil $DB -C $DBCONV
     if [ $? -ne 0 ]
       then
          exit $?
     fi
fi

#
# Truncate the new Database BI file
#
echo "%% `date +'%a %T'` Starting truncate .bi for $DB ..."
$TEST $DLCBIN/proutil $DB -C truncate bi -G $G
if [ $? -ne 0 ]
  then
     exit $?
fi

#
# Start/Turn on the Database AI file
#
if [ "$AI" != "" ]
  then
     echo "%% `date +'%a %T'` Starting .ai for $DB ..."
     $TEST $DLCBIN/rfutil $DB -C mark backedup
     $TEST $DLCBIN/rfutil $DB -C aimage begin unbuffered $AI -G $G
     if [ $? -ne 0 ]
       then
          exit $?
     fi
fi

#
# Change File protections for the Database files
#
if [ -f $DB.st ]
then
    $TEST chmod 666 $DB.db
    $TEST chmod 666 $DB.lg
    if [ `/usr/ucb/whoami 2>/dev/null` = root ]
    then
        $TEST chown mis:is $DB.db
        $TEST chown mis:is $DB.lg
    fi

    more $DB.st | awk '{print $1, $2}' |
    while read FILETYPE FILENAME
    do
        $TEST chmod 666 $FILENAME
        if [ `/usr/ucb/whoami 2>/dev/null` = root ]
        then
            $TEST chown mis:is $FILENAME
        fi
    done
else
    $TEST chmod 666 $DB.*
    if [ `/usr/ucb/whoami 2>/dev/null` = root ]
    then
        $TEST chown mis:is $DB.*
    fi
fi

if [ "$AI" != "" ]
then
    FILENAME=`echo $AI | sed 's|-a ||'`
    $TEST chmod 666 $FILENAME.ai
    $TEST chown mis:is $FILENAME.ai
fi

exit $?
